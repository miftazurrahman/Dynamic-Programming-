class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        if (n < 2) return s;

        int start = 0, end = 0;

        for (int i = 0; i < n; i++) {
            int len1 = expand(s, i, i);     // odd-length center at i
            int len2 = expand(s, i, i + 1); // even-length center between i and i+1
            int len = Math.max(len1, len2);

            if (len > end - start + 1) {
                // unified formula (works for odd/even both)
                start = i - (len - 1) / 2;
                end   = i +  len      / 2;
            }
        }
        return s.substring(start, end + 1);
    }

    private int expand(String s, int l, int r) {
        int n = s.length();
        while (l >= 0 && r < n && s.charAt(l) == s.charAt(r)) {
            l--; r++;
        }
        return r - l - 1; // last valid window length
    }
}
